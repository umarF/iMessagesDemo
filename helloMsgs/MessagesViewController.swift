//
//  MessagesViewController.swift
//  helloMsgs
//
//  Created by Umar Farooque on 15/01/17.
//  Copyright Â© 2017 ufocorp. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    
    @IBOutlet weak var inputField: UITextField!
    @IBOutlet weak var moviesTable: UITableView!
    var filterMode = false
    var filterArray = [movieData]()
    var dataArray = [movieData]()
    var savedConversation: MSConversation?

    struct movieData {
        
        var movieTitle = ""
        var movieKeywords = ""
        
        init(title:String,keywords:String) {
            self.movieTitle = title
            self.movieKeywords = keywords
            
        }
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        inputField.delegate = self
        moviesTable.delegate = self
        moviesTable.dataSource = self
        dataArray = [movieData(title: "Dark Knight", keywords: "Batman, Alfred, Catwoman, Wayne, Bane"),movieData(title: "Matrix", keywords: "Neo, Mr. Smith, Trinity, Morpheous, Tank, Dejavu"),movieData(title: "John Whick", keywords: "Dog,Ford Mustang, Baba Yega, Contract"),movieData(title: "LOTR", keywords: "Frodo, Rings, Sam, Gandalf, Nasgul, Elf"),movieData(title: "Hobbits", keywords: "Hobbits, Dwarves, Elf, Smaug"),movieData(title: "Star Wars", keywords: "Empire, Republic, Sith, Lightsaber, Falcon, Jedi, Yoda, Anakin")]
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        savedConversation = conversation
        
        if conversation.selectedMessage?.url != nil{
            
            if (conversation.selectedMessage?.url?.absoluteString.characters.count)! > 0{
                
                let index = conversation.selectedMessage?.url!.absoluteString.index((conversation.selectedMessage?.url!.absoluteString.startIndex)!, offsetBy: 7)
                let title = conversation.selectedMessage?.url!.absoluteString.substring(from: index!)
                self.extensionContext?.open(URL(string: "iMsgs://\(title!)")!, completionHandler: nil)
                
                
            }
            
            
        }
        
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

    override func didSelect(_ message: MSMessage, conversation: MSConversation) {
        
        if (message.url?.absoluteString.characters.count)! > 0{
            
            let index = message.url!.absoluteString.index(message.url!.absoluteString.startIndex, offsetBy: 7)
            let title = message.url!.absoluteString.substring(from: index )
            self.extensionContext?.open(URL(string: "iMsgs://\(title)")!, completionHandler: nil)
            
            
        }
        
        
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.

        
    }
    
    func filterKeywords(keyword:String){
        
        if keyword.characters.count > 0 {
            
            filterArray =  dataArray.filter({ $0.movieKeywords.contains(keyword) == true})
            
        }
        
    }
}

extension MessagesViewController: UITableViewDelegate,UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        if filterMode == false {
            
            return dataArray.count
            
        }else{
            
            return filterArray.count
            
            
        }
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "movieCell")
        let cellTitle = cell?.viewWithTag(1) as! UILabel
        let cellkeywords = cell?.viewWithTag(2) as! UILabel
        if filterMode == true {
            cellTitle.text = filterArray[indexPath.row].movieTitle
            cellkeywords.text = filterArray[indexPath.row].movieKeywords
            
        }else{
            cellTitle.text = dataArray[indexPath.row].movieTitle
            cellkeywords.text = dataArray[indexPath.row].movieKeywords
        
        }
        return cell!
        
        
    }
    
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {

        let message = MSMessage()
        let layout = MSMessageTemplateLayout()
        var item = URLQueryItem(name: "", value: "")

        if filterMode == true {
                layout.caption = filterArray[indexPath.row].movieTitle
                layout.subcaption = filterArray[indexPath.row].movieKeywords
                item = URLQueryItem(name: "title", value: filterArray[indexPath.row].movieTitle)

        }else{
                layout.caption = dataArray[indexPath.row].movieTitle
                layout.subcaption = dataArray[indexPath.row].movieKeywords
                item = URLQueryItem(name: "title", value: dataArray[indexPath.row].movieTitle)

        }
        var components = URLComponents()
        
        // put it into an array of query items
        var items = [URLQueryItem]()
        items.append(item)
        components.queryItems = items
        //set message url
        message.url = components.url!
        message.layout = layout

        self.savedConversation?.insert(message, completionHandler: { (err) in
            
            print("ERRRR \(err.debugDescription)")
        })
        if self.presentationStyle == .expanded {
            self.requestPresentationStyle(.compact)
        }

        
    }
    
}


extension MessagesViewController: UITextFieldDelegate {
    
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        
        if presentationStyle == .compact {
            
            requestPresentationStyle(.expanded)
        }
        return true
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        
        filterKeywords(keyword: textField.text!)
        filterMode = true
        moviesTable.reloadData()
        return true
    }
    
    func textFieldShouldClear(_ textField: UITextField) -> Bool {
        
        textField.text? = ""
        filterMode = false
        moviesTable.reloadData()
        return true
    }
    
    
}
